name: CI/CD Pipeline for BurgerHub

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: burgerhub-frontend
  ECS_SERVICE: burgerhub-service
  ECS_CLUSTER: burgerhub-cluster
  ECS_TASK_DEFINITION: burgerhub-task-def

jobs:
  # Job 1: Test and Build
  test-and-build:
    name: Test and Build React App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Clean package managers
        run: |
          cd frontend
          rm -f yarn.lock

      - name: Install dependencies
        run: |
          cd frontend
          npm cache clean --force
          rm -rf node_modules
          npm install --legacy-peer-deps --force

      - name: Run linting
        run: |
          cd frontend
          npm run lint || true
        continue-on-error: true

      - name: Run tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false --passWithNoTests
        continue-on-error: true

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: frontend/build/
          retention-days: 1

  # Job 2: Security Scan
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: test-and-build
    permissions:
      contents: read
      security-events: write
      actions: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: |
          cd frontend
          npm audit --audit-level=high || true
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "frontend/"
          format: "sarif"
          output: "trivy-results.sarif"
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != '' && github.event_name == 'push'
        with:
          sarif_file: "trivy-results.sarif"
        continue-on-error: true

  # Job 3: Build and Push Docker Image
  docker-build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      security-events: write
      actions: read
      id-token: write

    outputs:
      image-uri: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Image vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          format: "sarif"
          output: "docker-trivy-results.sarif"
        continue-on-error: true

      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('docker-trivy-results.sarif') != '' && github.event_name == 'push'
        with:
          sarif_file: "docker-trivy-results.sarif"
        continue-on-error: true

  # Job 4: Deploy Infrastructure with Terraform
  terraform-deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.ref == 'refs/heads/main'

    defaults:
      run:
        working-directory: terraform

    outputs:
      alb_dns_name: ${{ steps.terraform-outputs.outputs.alb_dns_name }}
      ecs_cluster_name: ${{ steps.terraform-outputs.outputs.ecs_cluster_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Terraform Format Check
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=burgerhub/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="image_tag=latest" \
            -var="environment=production" \
            -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Get outputs
        id: terraform-outputs
        run: |
          echo "alb_dns_name=$(terraform output -raw alb_dns_name)" >> $GITHUB_OUTPUT
          echo "ecs_cluster_name=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_OUTPUT

  # Job 5: Deploy Application to ECS
  deploy-ecs:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: [docker-build-push, terraform-deploy]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json

          # Remove fields that cause issues during re-registration
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' task-definition.json > temp.json && mv temp.json task-definition.json

      - name: Update ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: burgerhub-container
          image: ${{ needs.docker-build-push.outputs.image-uri }}

      - name: Validate task definition
        run: |
          echo "Validating task definition..."
          echo "Image URI: ${{ needs.docker-build-push.outputs.image-uri }}"
          cat ${{ steps.task-def.outputs.task-definition }} | jq '.containerDefinitions[0].image'

      - name: Deploy to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Service deployment verification
        run: |
          echo "Deployment completed successfully!"
          echo "Application URL: http://${{ needs.terraform-deploy.outputs.alb_dns_name }}"

  # Job 6: Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-ecs]
    if: always()

    steps:
      - name: Deployment Success Notification
        if: needs.deploy-ecs.result == 'success'
        run: |
          echo "‚úÖ BurgerHub deployment successful!"
          echo "üöÄ Application is live and ready to serve customers!"

      - name: Deployment Failure Notification
        if: needs.deploy-ecs.result == 'failure'
        run: |
          echo "‚ùå BurgerHub deployment failed!"
          echo "üîß Please check the logs and try again."
